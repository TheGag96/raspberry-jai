diff --git a/modules/Atomics.jai b/modules/Atomics.jai
index d1db0bc..2a619cf 100644
--- a/modules/Atomics.jai
+++ b/modules/Atomics.jai
@@ -90,13 +90,26 @@ compare_and_swap2 :: (dest: *void, old_value_1: $T1_64, old_value_2: $T2_64, new
     actual_old_2 := old_value_2;
 
     success: bool = ---;
-    #asm {
-        old_value_1 === a;
-        old_value_2 === d;
-        new_value_1 === b;
-        new_value_2 === c;
-        lock_cmpxchg16b  old_value_2, old_value_1, [dest], new_value_2, new_value_1;
-        setz success;
+    #if CPU == .X64 {
+        #asm {
+            old_value_1 === a;
+            old_value_2 === d;
+            new_value_1 === b;
+            new_value_2 === c;
+            lock_cmpxchg16b  old_value_2, old_value_1, [dest], new_value_2, new_value_1;
+            setz success;
+        }
+    }
+    else {
+        // @Hack: This is not atomic!!!!!!
+        if (old_value_1 == new_value_1 && old_value_2 == new_value_2) {
+            (cast(*T1_64)dest)[0] = new_value_1;
+            (cast(*T2_64)dest)[1] = new_value_2;
+            success = true;
+        }
+        else {
+            success = false;
+        }
     }
 
     return success;
diff --git a/modules/Bindings_Generator/module.jai b/modules/Bindings_Generator/module.jai
index 9baa7c7..4890c11 100644
--- a/modules/Bindings_Generator/module.jai
+++ b/modules/Bindings_Generator/module.jai
@@ -145,6 +145,7 @@ RESERVED_NAMES :: string.[
     "cast",
     "context",
     "false",
+    "interface",
     "is_constant",
     "null",
     "remove",
diff --git a/modules/Simp/backend/gl.jai b/modules/Simp/backend/gl.jai
index 0cae104..03503f6 100644
--- a/modules/Simp/backend/gl.jai
+++ b/modules/Simp/backend/gl.jai
@@ -203,9 +203,9 @@ OUT_IN vec2 TextureCoords;
 OUT_IN vec4 iterated_color;
 
 #ifdef VERTEX_SHADER
-in vec4 vert_position;
-in vec4 vert_color;
-in vec2 vert_uv0;
+attribute vec4 vert_position;
+attribute vec4 vert_color;
+attribute vec2 vert_uv0;
 
 uniform mat4 projection;
 
@@ -217,14 +217,12 @@ void main() {
 #endif // VERTEX_SHADER
 
 #ifdef FRAGMENT_SHADER
-out vec4 color;
-
 uniform sampler2D text_sampler;
 uniform vec4 text_color;
 
 void main () {
-    vec4 texture_sample = texture(text_sampler, TextureCoords);
-    color = vec4(iterated_color.xyz, texture_sample.a * iterated_color.a); // text_color * texture_sample;
+    vec4 texture_sample = texture2D(text_sampler, TextureCoords);
+    gl_FragColor = vec4(iterated_color.xyz, texture_sample.a * iterated_color.a); // text_color * texture_sample;
     if (texture_sample.a < .3)  discard;
 }
 #endif // FRAGMENT_SHADER
@@ -235,8 +233,8 @@ SHADER_COLOR :: #string END
 OUT_IN vec4 iterated_color;
 
 #ifdef VERTEX_SHADER
-in vec4 vert_position;
-in vec4 vert_color;
+attribute vec4 vert_position;
+attribute vec4 vert_color;
 
 uniform mat4 projection;
 
@@ -247,10 +245,8 @@ void main() {
 #endif // VERTEX_SHADER
 
 #ifdef FRAGMENT_SHADER
-out vec4 color;
-
 void main () {
-    color = iterated_color;
+    gl_FragColor = iterated_color;
 }
 #endif // FRAGMENT_SHADER
 END
@@ -264,9 +260,9 @@ OUT_IN vec2 TexCoords;
 OUT_IN vec4 iterated_color;
 
 #ifdef VERTEX_SHADER
-in vec4 vert_position;
-in vec4 vert_color;
-in vec2 vert_uv0;
+attribute vec4 vert_position;
+attribute vec4 vert_color;
+attribute vec2 vert_uv0;
 
 uniform mat4 projection;
 
@@ -278,15 +274,13 @@ void main() {
 #endif // VERTEX_SHADER
 
 #ifdef FRAGMENT_SHADER
-out vec4 color;
-
 uniform sampler2D diffuse_texture;
 
 void main () {
     vec4 color_tex = iterated_color * texture(diffuse_texture, TexCoords);
     if (color_tex.a < 0.1) discard;
 
-    color = color_tex;
+    gl_FragColor = color_tex;
 }
 #endif // FRAGMENT_SHADER
 END
@@ -297,9 +291,9 @@ OUT_IN vec2 TexCoords;
 OUT_IN vec4 iterated_color;
 
 #ifdef VERTEX_SHADER
-in vec4 vert_position;
-in vec4 vert_color;
-in vec2 vert_uv0;
+attribute vec4 vert_position;
+attribute vec4 vert_color;
+attribute vec2 vert_uv0;
 
 uniform mat4 projection;
 
@@ -311,15 +305,13 @@ void main() {
 #endif // VERTEX_SHADER
 
 #ifdef FRAGMENT_SHADER
-out vec4 color;
-
 uniform sampler2D diffuse_texture;
 
 void main () {
-    vec4 color_tex = iterated_color * texture(diffuse_texture, TexCoords);
+    vec4 color_tex = iterated_color * texture2D(diffuse_texture, TexCoords);
     if (color_tex.a < 0.1) discard;
 
-    color = color_tex;
+    gl_FragColor = color_tex;
 }
 #endif // FRAGMENT_SHADER
 END
@@ -374,15 +366,15 @@ get_shader_program :: (shader_text: string) -> GLuint {
         END
     } else {
         PREFIX_V :: #string END
-        #version 330 core
+        #version 120
         #define VERTEX_SHADER
-        #define OUT_IN out
+        #define OUT_IN varying
         END
 
         PREFIX_F :: #string END
-        #version 330 core
+        #version 120
         #define FRAGMENT_SHADER
-        #define OUT_IN in
+        #define OUT_IN varying
         END
     }
 
diff --git a/modules/String/module.jai b/modules/String/module.jai
index bd68af7..9fb36e9 100644
--- a/modules/String/module.jai
+++ b/modules/String/module.jai
@@ -1562,7 +1562,7 @@ is_any :: (c: u8, chars:string) -> bool {
 
 #scope_module
 
-USE_SIMD   :: true;
+USE_SIMD   :: CPU == .X64;
 SIMD_WIDTH :: 16;
 
 Basic :: #import "Basic";
